[
  {
    "segment": 1,
    "difficulty": 5,
    "question": "What is the purpose of an if statement in Python?",
    "options": [
      "To create variables",
      "To perform mathematical calculations",
      "To make decisions based on conditions",
      "To print messages to the console"
    ],
    "answer": "2",
    "explanation": "If statements allow your code to execute different blocks of code based on whether a certain condition is True or False."
  },
  {
    "segment": 1,
    "difficulty": 7,
    "question": "What is the significance of indentation in Python if statements?",
    "options": [
      "It improves code readability",
      "It determines which statements belong to the if block",
      "It has no specific meaning",
      "It separates keywords from variables"
    ],
    "answer": "1",
    "explanation": "Indentation is crucial in Python as it defines the scope of the if block and tells the interpreter which statements should be executed if the condition is True."
  },
  {
    "segment": 2,
    "difficulty": 6,
    "question": "What is the alternative to using multiple if statements with different conditions?",
    "options": [
      "While loops",
      "For loops",
      "Else statements",
      "Elif statements"
    ],
    "answer": "3",
    "explanation": "Elif statements offer a more structured way to check multiple conditions, executing the appropriate block only if the corresponding condition is True."
  },
  {
    "segment": 2,
    "difficulty": 8,
    "question": "How does the ternary operator simplify if-else statements?",
    "options": [
      "It combines the condition and the result into a single line",
      "It removes the need for indentation",
      "It introduces new keywords",
      "It only works with numerical values"
    ],
    "answer": "0",
    "explanation": "The ternary operator provides a concise way to assign values based on a condition, making the code more compact and readable."
  },
  {
    "segment": 3,
    "difficulty": 4,
    "question": "What are the three logical operators in Python?",
    "options": [
      "And, Or, Not",
      "Plus, Minus, Multiply",
      "Equal, Not Equal, Greater Than",
      "If, Elif, Else"
    ],
    "answer": "0",
    "explanation": "These operators are used to combine or negate Boolean expressions, allowing you to create complex conditions."
  },
  {
    "segment": 3,
    "difficulty": 9,
    "question": "How does short-circuiting behavior work with logical operators?",
    "options": [
      "It evaluates all conditions regardless of the outcome",
      "It stops evaluation as soon as the result is determined",
      "It prioritizes certain operators over others",
      "It only applies to the 'And' operator"
    ],
    "answer": "1",
    "explanation": "Short-circuiting optimizes evaluation by stopping as soon as the final result is known, improving efficiency." 
  },
  {
    "segment": 4,
    "difficulty": 7,
    "question": "What is the benefit of chaining comparison operators?",
    "options": [
      "It reduces code complexity",
      "It introduces new data types",
      "It only works with numerical values",
      "It requires fewer variables"
    ],
    "answer": "0",
    "explanation": "Chaining allows you to express multiple comparisons in a single line, enhancing code readability and maintainability."
  }
]
