 In almost every program, there are times you need to make decisions. And that's when you use an if statement. Here's an example. Let's say we have a variable called temperature, we studied it to 35. Now, if temperature is greater than 30, perhaps we want to display a message to the user. So we use an if statement, if, after if we add a condition, which is basically a Boolean expression, an expression that produces a Boolean value. So if temperature is greater than 30, here we have a Boolean expression. If this expression evaluates to true, the following statements will be executed. Let me show you. Now, here's the important part that a lot of beginners miss. When you use an if statement, you should always terminate your statement with a colon. Now let's see what happens when I press enter. So here we have two white spaces. This is very important because using these indentations, Python interpreter will know what statements should be executed if this condition is true. Here we want to print a message like, it's warm, we can print another message as well, drink water. So we can have as many statements as we want here, as long as they are indented, they belong to this if block. Now, when we finish here, we should remove indentation to indicate the end of this if block. So here we can add a print statement with a message like done. This statement will always be executed whether this condition is true or not. Now, note that when I save the changes, this indentation you see here is going to be doubled up. Take a look, save, there you go. So when we save the changes, auto-pap 8, reformat our code, and use... four white spaces for indentation. So 1, 2, 3, 4. It uses four white spaces because that's what PEP 8 recommends. All right, now let's run this program. So because temperature is greater than 13, we see the first two messages and we see the done message regardless. So if I change the temperature to let's say 15 and run the program one more time, look, this done message is executed whether our condition is true or not. So pay great attention to these indentations. That's one of the issues I see in beginner's code. Let's say they want both these print statements to be executed if the condition is true. Accidentally, they remove the indentation on the fourth line. And that's why their program doesn't work as they expect. So be careful about this. Now, what if we want to have multiple conditions? We use an LIF statement. So LIF that is short. else if here we can add another condition another expression so temperature is greater than 20 once again colon enter by default here VS code is using two white spaces so don't worry about this as soon as you save the changes those two white spaces will be converted to four white spaces so let's print a different message it's nice save the changes now look all these lines are indented consistently you can have as many LF statements as you want and optionally you can also have an L statement so if none of the previous conditions are true then what you have in the else block will be executed once again we add the colon annotation print here we can add a message like it's called save the changes in this case temperature is 15 so None of these two conditions will be true and we will see it's called. Let's run the program, there you go. In this lecture, I'm going to show you a technique for writing Clean Air Code. So let's say we're building an application for a university, and we want to check to see if the person who's applying for this university program is eligible or not. So we start by defining a variable called age, set it to 22. Now, if age is greater than or equal to 18, colon, print, eligible, remove the indentation, else, colon, print, not eligible. Let's run the program, make sure it works, beautiful. Now, there is nothing wrong in this piece of code, but I want to show you at clean. way to achieve the same result. Instead of having a print statement here, we can define a variable like message and set it to this string. That is the first step. So message equals this string. And then we will print this message. Now, when you have an if L statement with this structure, where you're basically assigning a value to a variable, you can rewrite this in a simpler way. So this is how it works. All we want to do over these few lines is to assign a value to this message variable. So we start with message. We set it to eligible if age is greater than or equal to 18, else we set it to not eligible. This statement is almost like plain English. So what we have on line 7 is exactly equivalent to the four lines of code. Delete, save the changes, run the program, you can see this person is eligible. If I change the age to 12 and run the program, we get not eligible. So what we have here is called turnery operator. In Python, we have three logical operators and we use these operators to model more complex conditions. So these operators are and or and not. Let's see a real world example of using these operators. So imagine we're building an application for processing loans. So we need two variables. High income, we can set this to true and good underlying credit, we set it to true. Now here's the condition we want to implement. If the applicant has high income and good credit score, then they are eligible for the loan. So, if high income and good credit, we add the colon and print eligible. Note that here I have not compared the value of this variable with true. That is one of the issues I see in a lot of beginners code. This is redundant and unprofessional. Because high income is a Boolean, so it is either true or false. We don't need to compare true with true. So, if this condition is true and this second condition is true, then we will print eligible in the terminal. So, save the changes and run the program. Obviously, this person is eligible. However, if one of these conditions is false, we will not see eligible in the terminal. So, let's add an L statement here. and print not eligible. Run the program, we see not eligible. So this is how the AND operator works. With AND operator, if both conditions are true, the result will be true. In contrast, with the OR operator, as long as at least one of the conditions is true, the result will be true. So if I replace AND with OR here, we should see eligible and terminal. Let's run it one more time, there you go. So these are the AND and OR operators. Now let's take a look at an example of the NOT operator. So I'm going to define another variable, student, set it to true. Temporarily, I'm going to remove this expression and simplify it. We'll come back to this later. So let's say if the person is eligible, if they are not a student. The NOT operator basically inverses the value of a Boolean. So in this case, student is true. When we apply the not operator, the result will be false. So in this case, our condition will be false. And that's why this print statement will not be executed. Let me show you. So save, run the program. They are not eligible. If student was false, when we apply the not operator will get true. So our condition will be true and we'll see it eligible. Let's run it one more time. There you go. With these operators, we can model even more complex conditions. Here is an example. A person can be eligible if they have either high income or good credit and they should not be student. Let me show you how to implement this condition. So if high income or good credit, we want at least one of these conditions to be true. So we put these in parentheses. We want to separate these from the other condition, which is not a student. Now, the result of this should be true, which means at least one of these conditions should be true. After that, we'll add and not student. And finally, call. So with these operators, you can model all kinds of real word scenarios. So here is the example from the last lecture. A person is eligible for a loan if they have high income and good credit and they are not a student. Now, one thing you need to know about these Boolean operators is that they are short circuit. What do I mean by that? Well, when Python interpreter wants to evaluate this expression, it starts from the first argument. If this is true, it continues the evaluation to see if the second argument is off. So it continues the evaluation all the way to the end of this expression. However, as soon as one of these arguments is false, the evaluation stops. Let me show you what I mean. So if I change high income to false, when Python interpreter sees this expression, it starts here, it knows that high income is false. So it doesn't matter what comes after the result of this entire expression will always be false because at least one of the arguments or one of the operands is false. This is what we call short circuiting, just like the short circuit concept we have in electronics. So the evaluation stops as soon as one of these arguments evaluates to false. We have the same concept with the or operator. So if I change these and operators to or let's see what happens. With the or operator, we know that at least. one of the arguments should be true. So the evaluation stops as soon as we find an argument that evaluates to true. In this case, when Python interpreter evaluates this expression, it sees that high income is false, so it continues the evaluation, hoping that the next argument will be true. Here, good credit is true, so evaluation stops and the result of this entire expression will be true. So in Python, logical operators are short circuit. In this lecture, I'm going to show you how to chain comparison operators. This is a very powerful technique for writing clean code. Here is an example. Let's say we want to implement a rule that says age should be between 18 and 65. Here's how we can implement it. So we define a variable like age, set it to 22. Now, if age is greater than or equal to 18, and age is less than 65, then we print eligible. Now, here's a question for you. How do we write this rule in math? We can write it like this. Well, more accurately, we should have an equal sign here. So age should be between 18 and 65. This is how we write this rule in math. Now, I've got some good news for you. We can write the exact same expression in Python. So I'm going to move this up, put an if statement here, line four and line three are exactly equivalent. But as you can see, line four is cleaner and easier to read. So let's get rid of line three. This is what we call chaining comparison operators. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. So, let's get rid of line four. Alright, here is a little quiz for you. I want you to pause the video and think about this quiz for 10 to 20 seconds. What do you think we'll see on the terminal when we run this program? So pause the video, figure out the answer when you're ready, come back, continue watching. Alright, let's see what happens when we run this program. Once we get this if statement, in this case we're comparing two different objects for equality and these objects have different types. We have a number compared to this string. So number 10 and string 10 are not equal. That is why A will not be printed on the terminal. So the control moves to the L if part. Here we have two Boolean expressions, here is the first one, here is the second one, and they are combined using the logical end. So if both these expressions are evaluated to true, then this entire expression... will be true and we will see be on the terminal. Let's see if both these expressions are evaluated to true. Here's the first part. Back is greater than Apple. That is true because when we sort this word, back comes after Apple. But look at the second part. This expression is evaluated to false because back is not greater than cat. So when we apply the logical end between true and false, the result will be false. That is why this statement will not be executed. So the control moves to the else part and when we run this program, the letter C will be printed on the terminal. Hi guys, thank you for watching this tutorial. My name is Mosh Hamadani and I have tons of tutorials like this for you on my channel. So be sure to subscribe and also please like and share this video. If you want to learn Python properly from scratch with depth, I have a comprehensive Python tutorial. for you. The link is below this video, so click the link to get started. Thank you and have a fantastic day.